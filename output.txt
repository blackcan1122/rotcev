
============================================================
  ROTCEV vs STD::VECTOR PERFORMANCE BENCHMARK
============================================================

Container Sizes:
  blck::rotcev<std::string>: 24 bytes
  std::vector<std::string>:  24 bytes

----------------------------------------
  INT OPERATIONS (Trivial Type)
----------------------------------------
push_back #1             | Rotcev: 1740    ns| Std::vector: 490     ns| Diff: 1250    ns (ROTCEV 3.55x SLOWER)
push_back #2             | Rotcev: 600     ns| Std::vector: 370     ns| Diff: 230     ns (ROTCEV 1.62x SLOWER)
push_back #3             | Rotcev: 100     ns| Std::vector: 200     ns| Diff: -100    ns (ROTCEV 2.00x FASTER)
access [0]               | Rotcev: 1860    ns| Std::vector: 100     ns| Diff: 1760    ns (ROTCEV 18.60x SLOWER)
access [1]               | Rotcev: 130     ns| Std::vector: 110     ns| Diff: 20      ns (ROTCEV 1.18x SLOWER)
access [2]               | Rotcev: 120     ns| Std::vector: 90      ns| Diff: 30      ns (ROTCEV 1.33x SLOWER)

----------------------------------------
  Bulk Operations - int
----------------------------------------

----------------------------------------
  STRING OPERATIONS (Non-Trivial Type)
----------------------------------------
push_back #1             | Rotcev: 310     ns| Std::vector: 450     ns| Diff: -140    ns (ROTCEV 1.45x FASTER)
push_back #2             | Rotcev: 400     ns| Std::vector: 480     ns| Diff: -80     ns (ROTCEV 1.20x FASTER)
push_back #3             | Rotcev: 150     ns| Std::vector: 670     ns| Diff: -520    ns (ROTCEV 4.47x FASTER)
access [0]               | Rotcev: 250     ns| Std::vector: 210     ns| Diff: 40      ns (ROTCEV 1.19x SLOWER)
access [1]               | Rotcev: 160     ns| Std::vector: 190     ns| Diff: -30     ns (ROTCEV 1.19x FASTER)
access [2]               | Rotcev: 160     ns| Std::vector: 170     ns| Diff: -10     ns (ROTCEV 1.06x FASTER)

----------------------------------------
  Bulk Operations - std::string
----------------------------------------

----------------------------------------
  CUSTOM OBJECT OPERATIONS (Complex Non-Trivial Type)
----------------------------------------
push_back #1             | Rotcev: 460     ns| Std::vector: 740     ns| Diff: -280    ns (ROTCEV 1.61x FASTER)
push_back #2             | Rotcev: 690     ns| Std::vector: 850     ns| Diff: -160    ns (ROTCEV 1.23x FASTER)
push_back #3             | Rotcev: 660     ns| Std::vector: 730     ns| Diff: -70     ns (ROTCEV 1.11x FASTER)
access [0]               | Rotcev: 2640    ns| Std::vector: 350     ns| Diff: 2290    ns (ROTCEV 7.54x SLOWER)
access [1]               | Rotcev: 330     ns| Std::vector: 340     ns| Diff: -10     ns (ROTCEV 1.03x FASTER)
access [2]               | Rotcev: 340     ns| Std::vector: 320     ns| Diff: 20      ns (ROTCEV 1.06x SLOWER)

----------------------------------------
  Bulk Operations - TestObject
----------------------------------------

----------------------------------------
  DOUBLE OPERATIONS (Larger Trivial Type)
----------------------------------------
push_back #1             | Rotcev: 210     ns| Std::vector: 380     ns| Diff: -170    ns (ROTCEV 1.81x FASTER)
push_back #2             | Rotcev: 270     ns| Std::vector: 300     ns| Diff: -30     ns (ROTCEV 1.11x FASTER)
push_back #3             | Rotcev: 110     ns| Std::vector: 250     ns| Diff: -140    ns (ROTCEV 2.27x FASTER)

----------------------------------------
  Bulk Operations - double
----------------------------------------

============================================================
  BENCHMARK COMPLETE
============================================================

============================================================
  PERFORMANCE ANALYSIS & CONCLUSION
============================================================

üìä OVERALL STATISTICS:
--------------------------------------------------
Total tests conducted: 21
Rotcev wins: 13 (61.9%)
Std::vector wins: 8 (38.1%)
Ties: 0 (0.0%)

‚ö° SPIKE ANALYSIS:
--------------------------------------------------
Total spikes detected: 0 (threshold: 3000ns)

üéØ PERFORMANCE EXCLUDING SPIKES:
--------------------------------------------------
Tests without spikes: 21
Rotcev wins: 13 (61.9%)
Average Rotcev time: 557ns
Average std::vector time: 371ns
‚û°Ô∏è  Without spikes, Rotcev is 1.50x slower on average

üè∑Ô∏è  TYPE-SPECIFIC PERFORMANCE:
--------------------------------------------------
TestObject:
  Tests: 6, Wins: 4 (66.67%)
  Avg times: Rotcev 853ns, std::vector 555ns
  Result: 1.54x slower

double:
  Tests: 3, Wins: 3 (100.00%)
  Avg times: Rotcev 197ns, std::vector 310ns
  Result: 1.58x FASTER

int:
  Tests: 6, Wins: 1 (16.67%)
  Avg times: Rotcev 758ns, std::vector 227ns
  Result: 3.35x slower

std::string:
  Tests: 6, Wins: 5 (83.33%)
  Avg times: Rotcev 238ns, std::vector 362ns
  Result: 1.52x FASTER


üî¢ AVERAGE PERFORMANCE:
--------------------------------------------------
Average Rotcev time: 557ns
Average std::vector time: 371ns
‚û°Ô∏è  Rotcev is 1.50x SLOWER on average

üèÜ BEST & WORST PERFORMANCES:
--------------------------------------------------
ü•á Best performance: push_back #3 (4.47x faster)
ü•â Worst performance: access [0] (18.60x slower)

üöÄ PUSH_BACK OPERATIONS:
--------------------------------------------------
Total push_back tests: 12
Rotcev wins: 10 (83.33%)
Std::vector wins: 2 (16.67%)
Average push_back time - Rotcev: 475ns, Std::vector: 492ns
‚û°Ô∏è  Rotcev push_back is 1.04x FASTER on average

üéØ ACCESS OPERATIONS:
--------------------------------------------------
Total access tests: 9
Rotcev wins: 3 (33.33%)
Std::vector wins: 6 (66.67%)
Average access time - Rotcev: 666ns, Std::vector: 209ns
‚û°Ô∏è  Rotcev access is 3.19x SLOWER on average

üìä COMPREHENSIVE COMPARISON: WITH vs WITHOUT SPIKES:
============================================================
METRIC                             | WITH SPIKES    | WITHOUT SPIKES | IMPACT
--------------------------------------------------------------------------------
Total Tests                        | 21             | 21             | No spikes
Rotcev Win Rate                    | 61.9         %| 61.9         %| 0.0% change
Avg Rotcev Time (ns)               | 557           | 557           | 0.0% slower
Avg Std::vector Time (ns)          | 371           | 371           | 0.0% slower
Rotcev vs Std::vector              | 1.5          x slower| 1.5          x slower| Same trend

üéØ KEY INSIGHTS:
--------------------------------------------------
‚Ä¢ ‚úÖ No significant spikes detected - consistent performance!

üèÜ FINAL VERDICT:
==================================================
‚öñÔ∏è  MIXED RESULTS (61.9% win rate, but 1.50x slower average)
You win more individual tests but have higher average latency.
üí° Suggests good performance in some scenarios, bottlenecks in others.
‚úÖ Strong in push_back operations (83.33% win rate)

Legend:
  - Positive difference: Rotcev is slower
  - Negative difference: Rotcev is faster
  - Lower nanoseconds = better performance

